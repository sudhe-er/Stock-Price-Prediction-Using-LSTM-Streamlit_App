# %%
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as data

# %% [markdown]
# 

# %%
start = '2011-01-01'
end = '2021-12-31'
df = data.DataReader('AAPL', 'yahoo', start, end)
df.head()

# %%
df.tail()

# %% [markdown]
# # **Resetting The Index**

# %%
df = df.reset_index()
df.head()

# %% [markdown]
# # **Dropping The Date & Adj Close Colmns**

# %%
df = df.drop(['Date','Adj Close'],axis = 1)
df.head()

# %% [markdown]
# # **Moving Avgs**

# %%
df

# %%
df.Close

# %%
plt.plot(df.Close)

# %%
ma100 = df.Close.rolling(100).mean()
ma100

# %%
plt.figure(figsize=(12,6))
plt.plot(df.Close)
plt.plot(ma100, 'r')

# %%
ma200 = df.Close.rolling(200).mean()
ma200

# %%
plt.figure(figsize=(12,6))
plt.plot(df.Close)
plt.plot(ma100, 'r')
plt.plot(ma200,'g')

# %%
df.shape

# %% [markdown]
# # **Splitting Dataset into Training & Testing**

# %%
data_training = pd.DataFrame(df['Close'][0:(int)(len(df)*0.70)])   # 70% data in training dataset 

data_testing = pd.DataFrame(df['Close'][(int)(len(df)*0.70):(int)(len(df))]) # 30% data in testing dataset

print(data_training.shape)
print(data_testing.shape)

# %%
data_training.head()

# %%
data_testing.head()

# %% [markdown]
# # **Scaling The Data To Fit Into LSTM Model**

# %%
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))

# %% [markdown]
# # **Fitting Training data into an Array**

# %%
data_training_array = scaler.fit_transform(data_training)
data_training_array

# %% [markdown]
# # **Divide The dataSet into Training dataset**

# %%
x_train = []
y_train = []
for i in range(100, data_training_array.shape[0]):
  x_train.append(data_training_array[i - 100 : i])
  y_train.append(data_training_array[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)

# %% [markdown]
# # **LSTM Model**

# %%
from keras.layers import Dense, Dropout, LSTM
from keras.models import Sequential

# %%
model = Sequential()
#Layer1
model.add(LSTM(units = 50, activation = 'relu', return_sequences= True, input_shape= (x_train.shape[1], 1)))
model.add(Dropout(0.2))
#Layer2
model.add(LSTM(units = 60, activation = 'relu', return_sequences= True))
model.add(Dropout(0.3))
#Layer3
model.add(LSTM(units = 80, activation = 'relu', return_sequences= True))
model.add(Dropout(0.4))
#Layer4
model.add(LSTM(units = 120, activation = 'relu'))
model.add(Dropout(0.5))

model.add(Dense(units = 1))

# %% [markdown]
# # Summary

# %%
model.summary()

# %% [markdown]
# # Compile

# %%
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, epochs = 50)

# %% [markdown]
# # Save The Model

# %%
model.save('keras_model.h5')

# %% [markdown]
# # Testing The Data

# %%
data_testing.head()

# %%
data_training.tail(100)

# %%
past100_days = data_training.tail(100)

# %%
final_df = past100_days.append(data_testing, ignore_index=True)

# %%
final_df.head()

# %%
input_data = scaler.fit_transform(final_df)
input_data

# %%
input_data.shape

# %%
x_test = []
y_test = []

for i in range(100, input_data.shape[0]):
  x_test.append(input_data[i - 100 : i])
  y_test.append(input_data[i, 0])

x_test, y_test = np.array(x_test), np.array(y_test)
print(x_test.shape)
print(y_test.shape)

# %% [markdown]
# 

# %% [markdown]
# # Make Predictions

# %%
y_predicted = model.predict(x_test)

# %%
y_predicted.shape

# %%
y_test

# %%
scaler.scale_

# %%
scale_factor = 1/0.00690691
y_predicted = y_predicted * scale_factor
y_test = y_test * scale_factor


# %%
plt.figure(figsize = (12, 6))
plt.plot(y_test, 'g', label = 'Actual Price')
plt.plot(y_predicted, 'r', label = 'Predicted')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()


